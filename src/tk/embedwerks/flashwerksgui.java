package tk.embedwerks;
import java.io.*;
import javax.swing.*;
import java.lang.ProcessBuilder;
import java.util.*;
/**
 * flashwerks GUI - the open source front-end for microcontroller programmers
 * https://embedwerks.shravanj.com
 * https://github.com/embedwerks
 * @author Shravan Jambukesan
 */
public class flashwerksgui extends javax.swing.JFrame
{
    
    public String filePath = "";
    public String port = "";
    public String command = "";
    public String deviceType = "";
        
    /**
     * Creates new form flashwerksgui
     */
    public flashwerksgui()
    {
        initComponents();
        setResizable(false);
        status.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flashwerksLabel = new javax.swing.JLabel();
        queryDevicesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        devicePicker = new javax.swing.JComboBox<>();
        fileChooserButton = new javax.swing.JButton();
        programDeviceButton = new javax.swing.JButton();
        versionLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectDeviceLabel = new javax.swing.JLabel();
        deviceTypePicker = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        mcuLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("flashwerks GUI");
        setPreferredSize(new java.awt.Dimension(800, 400));
        setResizable(false);

        flashwerksLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        flashwerksLabel.setText("flashwerks GUI - https://embedwerks.shravanj.com");

        queryDevicesButton.setText("Get Devices");
        queryDevicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryDevicesButtonActionPerformed(evt);
            }
        });

        status.setColumns(20);
        status.setRows(5);
        jScrollPane1.setViewportView(status);

        fileChooserButton.setText("Choose file...");
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });

        programDeviceButton.setText("Program Device");
        programDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programDeviceButtonActionPerformed(evt);
            }
        });

        versionLabel.setText("Pre-Release 2");

        selectDeviceLabel.setText("Select device");

        deviceTypePicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "atmega328p (USB to Serial)", "atmega328p (AVR ISP)", "atmega2560 (USB to Serial)", "atmega2560 (AVR ISP)" }));

        jLabel1.setText("https://github.com/embedwerks/flashwerks");

        mcuLabel.setText("Select microcontroller/microprocessor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deviceTypePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queryDevicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectDeviceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(devicePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(programDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(flashwerksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(flashwerksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(queryDevicesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectDeviceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devicePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mcuLabel)
                        .addGap(5, 5, 5)
                        .addComponent(deviceTypePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fileChooserButton)
                        .addGap(18, 18, 18)
                        .addComponent(programDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLabel)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryDevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryDevicesButtonActionPerformed

        try
        {
            if(System.getProperty("os.name").contains("Windows"))
            {
                devicePicker.removeAllItems();
                Process p = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", "mode"}); 
                p.waitFor();
                BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";
                while ((line=buf.readLine())!=null)
                {
                    if(line.contains("COM"))
                    {
                        String port = line.substring(line.indexOf("C"), line.indexOf(":"));
                        devicePicker.addItem(port);
                    }
                }
            }
            else
            {
                devicePicker.removeAllItems();
                String cmd = "";
                if(System.getProperty("os.name").contains("Mac"))
                {
                    cmd = "ls /dev/tty.*";
                }
                else
                {
                    cmd = "ls /dev/tty*";
                }
                Process p = Runtime.getRuntime().exec(new String[]{"bash","-c", cmd});
                p.waitFor();
                BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";
                while ((line=buf.readLine())!=null)
                {
                    devicePicker.addItem(line);
                }
            }

        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.toString());
        }
        
    }//GEN-LAST:event_queryDevicesButtonActionPerformed

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed

        try
        {
            final JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(fileChooserButton);
            if(returnVal == JFileChooser.APPROVE_OPTION)
            {
                File selectedFile = fc.getSelectedFile();
                filePath = selectedFile.getCanonicalPath();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.toString());
        }

    }//GEN-LAST:event_fileChooserButtonActionPerformed

    private void programDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programDeviceButtonActionPerformed

        try
        {
            String avrDudePath = "";
            String avrDudeCommand = "";
            
            /*
             *  Requires you to copy the avrdude.conf from C:\Program Files (x86)\Arduino\hardware\tools\avr\etc to 
             *  C:\Program Files (x86)\Arduino\hardware\tools\avr\bin
             */
            if(System.getProperty("os.name").contains("Windows"))
            {
                avrDudePath = "C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin";
                avrDudeCommand = "\"C:\\Program Files (x86)\\Arduino\\hardware\\tools\\avr\\bin\\avrdude\"";
            }
            else
            {
                avrDudePath = "/usr/local/bin/";
                avrDudeCommand = "/usr/local/bin/avrdude";
            }
            
            int devicePickerIndex = devicePicker.getSelectedIndex();
            port = devicePicker.getItemAt(devicePickerIndex);
            System.out.println(port);
            int deviceTypeIndex = deviceTypePicker.getSelectedIndex();
            deviceType = deviceTypePicker.getItemAt(deviceTypeIndex);
            String programmer = "";
            String processor = "";
            switch(deviceType)
            {
                case "atmega328p (USB to Serial)":
                    programmer = "arduino";
                    processor = "atmega328p";
                    break;
                case "atmega328p (AVR ISP)":
                    programmer = "avrispv2";
                    processor = "atmega328";
                    break;
                case "atmega2560 (USB to Serial)":
                    programmer = "stk500v2";
                    processor = "m2560";
                    break;
                case "atmega2560 (AVR ISP)":
                    programmer = "avrispv2";
                    processor = "m2560";
                    break;
            }
            List<String> commands = new ArrayList<String>();
            commands.add(avrDudeCommand);
            commands.add("-v");
            commands.add("-p");
            commands.add(processor);
            commands.add("-c");
            commands.add(programmer);
            commands.add("-P");
            commands.add(port);
            commands.add("-b");
            commands.add("115200");
            commands.add("-D");
            commands.add("-Uflash:w:" + filePath + ":i");
            ProcessBuilder pb = new ProcessBuilder(commands);
            pb.directory(new File(avrDudePath));
            pb.redirectErrorStream(true);
            Process process = pb.start();
            StringBuilder out = new StringBuilder();
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = null, previous = null;
            while ((line = br.readLine()) != null)
            {
                if (!line.equals(previous)) 
                {
                    previous = line;
                    out.append(line).append('\n');
                }
            }
            if (process.waitFor() == 0)
            {
                status.append("Successfully programmed!\n");
            }
            else
            {
                status.append("Error, unable to program device\n");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.toString());
        }

    }//GEN-LAST:event_programDeviceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try 
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new flashwerksgui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> devicePicker;
    private javax.swing.JComboBox<String> deviceTypePicker;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JLabel flashwerksLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mcuLabel;
    private javax.swing.JButton programDeviceButton;
    private javax.swing.JButton queryDevicesButton;
    private javax.swing.JLabel selectDeviceLabel;
    private javax.swing.JTextArea status;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}

package tk.embedwerks;
import java.io.*;
import javax.swing.*;
import java.lang.ProcessBuilder;
import java.util.*;
/**
 * flashwerks GUI - the open source front-end for microcontroller programmers
 * https://embedwerks.tk
 * https://github.com/embedwerks
 * @author Shravan Jambukesan
 */
public class flashwerksgui extends javax.swing.JFrame
{
    
    public String filePath = "";
    public String port = "";
    public String command = "";
    public String deviceType = "";
        
    /**
     * Creates new form flashwerksgui
     */
    public flashwerksgui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flashwerksLabel = new javax.swing.JLabel();
        queryDevicesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        devicePicker = new javax.swing.JComboBox<>();
        fileChooserButton = new javax.swing.JButton();
        programDeviceButton = new javax.swing.JButton();
        versionLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectDeviceLabel = new javax.swing.JLabel();
        deviceTypePicker = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        flashwerksLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        flashwerksLabel.setText("flashwerks GUI - https://embedwerks.tk");

        queryDevicesButton.setText("Query Devices");
        queryDevicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryDevicesButtonActionPerformed(evt);
            }
        });

        status.setColumns(20);
        status.setRows(5);
        jScrollPane1.setViewportView(status);

        fileChooserButton.setText("Choose file...");
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });

        programDeviceButton.setText("Program Device");
        programDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programDeviceButtonActionPerformed(evt);
            }
        });

        versionLabel.setText("v.0.0.1-alpha ");

        selectDeviceLabel.setText("Select device (after query)");

        deviceTypePicker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "atmega328p" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(devicePicker, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(selectDeviceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(queryDevicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(deviceTypePicker, 0, 206, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 274, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(programDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(flashwerksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(flashwerksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queryDevicesButton)
                        .addGap(18, 18, 18)
                        .addComponent(selectDeviceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(devicePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deviceTypePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(fileChooserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(programDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLabel)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryDevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryDevicesButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            String cmd = "ls /dev/tty.*";
            Process p = Runtime.getRuntime().exec(new String[]{"bash","-c",cmd});
            p.waitFor();
            BufferedReader buf = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line = "";
            while ((line=buf.readLine())!=null)
            {
                devicePicker.addItem(line);
            }
        }
        catch(Exception e)
        {
            
        }
        
    }//GEN-LAST:event_queryDevicesButtonActionPerformed

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            final JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(fileChooserButton);
            if(returnVal == JFileChooser.APPROVE_OPTION)
            {
                File selectedFile = fc.getSelectedFile();
                filePath = selectedFile.getCanonicalPath();
                System.out.println(filePath);
            }
        }
        catch(Exception e)
        {
            
        }

    }//GEN-LAST:event_fileChooserButtonActionPerformed

    private void programDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programDeviceButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            int devicePickerIndex = devicePicker.getSelectedIndex();
            port = devicePicker.getItemAt(devicePickerIndex);
            System.out.println(port);
            int deviceTypeIndex = deviceTypePicker.getSelectedIndex();
            deviceType = deviceTypePicker.getItemAt(deviceTypeIndex);
            String cmd = " -v -p " + deviceType + " -c arduino -P " + port + " -b 115200 -D -Uflash:w:" + filePath + ":i";
            System.out.println(cmd);
            List<String> commands = new ArrayList<String>();
            commands.add("/usr/local/bin/avrdude");
            commands.add("-v");
            commands.add("-p");
            commands.add(deviceType);
            commands.add("-c");
            commands.add("arduino");
            commands.add("-P");
            commands.add(port);
            commands.add("-b");
            commands.add("115200");
            commands.add("-D");
            commands.add("-Uflash:w:" + filePath + ":i");
            ProcessBuilder pb = new ProcessBuilder(commands);
            pb.directory(new File("/usr/local/bin/"));
            pb.redirectErrorStream(true);
            Process process = pb.start();
            StringBuilder out = new StringBuilder();
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = null, previous = null;
            while ((line = br.readLine()) != null)
            {
                if (!line.equals(previous)) 
                {
                    previous = line;
                    out.append(line).append('\n');
                }
            }
            if (process.waitFor() == 0)
            {
                status.append("Successfully programmed!\n");
            }
            else
            {
                status.append("Error, unable to program device\n");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.toString());
        }

    }//GEN-LAST:event_programDeviceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(flashwerksgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new flashwerksgui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> devicePicker;
    private javax.swing.JComboBox<String> deviceTypePicker;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JLabel flashwerksLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton programDeviceButton;
    private javax.swing.JButton queryDevicesButton;
    private javax.swing.JLabel selectDeviceLabel;
    private javax.swing.JTextArea status;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
